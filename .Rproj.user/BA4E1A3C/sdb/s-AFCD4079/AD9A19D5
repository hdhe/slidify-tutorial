{
    "contents" : "---\ntitle       : Introduction to googleVis\nsubtitle    : Lancaster University, 21 May 2013\nauthor      : Markus Gesmann\njob         : Maintainer of the googleVis and ChainLadder packages\nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : tomorrow      # \nwidgets     : []            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\nlicense     : by-nc-sa\ngithub      :\n  user      : mages\n  repo      : Introduction_to_googleVis\n---\n\n## Disclaimer\n\n1. I am an autodidact (me too)\n2. What I present here works for me\n3. Read and follow the official [Google Chart API documentation](https://developers.google.com/chart/) and [Terms of Service](https://developers.google.com/readme/terms)\n4. Sometimes you have re-load this presentation for the charts and all slides to appear\n\n---\n\n## Agenda\n\n* Introduction and motivation\n* Google Chart Tools\n* R package googleVis\n  * Concepts of googleVis\n  * Case studies\n\n```{r setOptions, echo=FALSE}\noptions(gvis.plot.tag=\"chart\")\n```\n\n--- .class #id \n\n## Hans Rosling: No more boring data\n\n<iframe width=\"420\" height=\"315\" src=\"http://www.youtube.com/embed/hVimVzgtD6w\" frameborder=\"0\" allowfullscreen></iframe>\n\n---\n\n## Motivation for googleVis\n\n* Inspired by Hans Rosling’s talks we wanted to use interactive data visualisation tools to foster the dialogue between data analysts and others\n\n* We wanted moving bubbles charts as well\n\n* The software behind Hans’ talk was bought by Google and integrated as motion charts into their Visualisation API\n\n* Ideally we wanted to use R, a language we knew\n\n* Hence, we had to create an interface between the Google Chart Tools and R\n\n--- \n\n## Overview of googleVis\n\n* [googleVis](http://code.google.com/p/google-motion-charts-with-r/) is a package for [R](http://www.r-poject.org/) and provides an interface between R and the [Google Chart Tools](https://developers.google.com/chart/)\n\n* The functions of the package allow users to visualise data with the Google Chart Tools without uploading their data to Google\n\n* The output of googleVis functions is html code that contains the data and references to JavaScript functions hosted by Google\n\n* To view the output a browser with an internet connection is required, the actual chart is rendered in the browser; some charts require Flash\n\n* See also: **Using the Google Visualisation API with R**, \n  [The R Journal, 3(2):40-44, December 2011](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Gesmann+de~Castillo.pdf) and googleVis [package vignette](http://cran.r-project.org/web/packages/googleVis/vignettes/googleVis.pdf)\n\n---\n\n## Introduction to Google Chart Tools\n\n* Google Chart Tools provide a way to visualize data on web sites\n\n* The API makes it easy to create interactive charts\n\n* It uses JavaScript and DataTable / JSON as input\n\n* Output is either HTML5/SVG or Flash\n\n* Browser with internet connection required to display chart\n\n* Please read the Google [Terms of Service](https://developers.google.com/terms/) before you start\n\n---\n\n## Structure of Google Charts\n\nThe chart code has five generic parts:\n\n1. References to Google’s AJAX and Visualisation API\n2. Data to visualise as a DataTable\n3. Instance call to create the chart\n4. Method call to draw the chart including options\n5. HTML &lt;div&gt; element to add the chart to the page\n\n---\n\n## How hard can it be?\n\n* Transform data into JSON object \n* Wrap some HTML and JavaScript around it \n* Thus, googleVis started life in August 2010\n\n\n----\n\n## Motion chart example\n\n```{r motionchartcode, results='asis'}\nlibrary(googleVis)\nplot(gvisMotionChart(Fruits, \"Fruit\", \"Year\",\n                     options=list(width=600, height=400)))\n```\n\n---\n\n\n## googleVis version 0.4.2 provides interfaces to \n\n* Flash based\n  * Motion Charts\n  * Annotated Time Lines\n  * Geo Maps\n* HMTL5/SVG based\n  * Maps, Geo Charts and Intensity Maps\n  * Tables, Gauges, Tree Maps\n  * Line-, Bar-, Column-, Area- and Combo Charts\n  * Scatter-, Bubble-, Candlestick-, Pie- and Org Charts\n\nRun ```demo(googleVis)``` to see [examples](http://code.google.com/p/google-motion-charts-with-r/wiki/GadgetExamples) of all charts and read the [vignette](http://cran.r-project.org/web/packages/googleVis/vignettes/googleVis.pdf) for more details.\n\n----\n\n## Key ideas of googleVis\n\n* Create wrapper functions in R which generate html files with references to Google's Chart Tools API\n* Transform R data frames into [JSON](http://www.json.org/) objects with [RJSONIO](http://www.omegahat.org/RJSONIO/)\n\n```{r}\nlibrary(RJSONIO)\ndat <- data.frame(x=LETTERS[1:2], y=1:2)\ncat(toJSON(dat)) \n```\n* Display the HTML output with the R HTTP help server\n\n---\n\n## The googleVis concept\n\n* Charts: *'gvis' + ChartType*\n* For a motion chart we have\n\n```{r eval=FALSE, tidy=FALSE}\nM <- gvisMotionChart(data, idvar='id', timevar='date', \n                     options=list(), chartid)\n```\n\n* Output of googleVis is a list of list\n\n* Display the chart by simply plotting the output: ```plot(M)```\n* Plot will generate a temporary html-file and open it in a new browser window \n* Specific parts can be extracted, e.g. \n  * the chart: ```M$html$chart``` or \n  * data: ```M$html$chart[\"jsData\"]```\n\n---\n\n## gvis-Chart structure\n\nList structure:\n\n<img height=350 src=\"https://dl.dropbox.com/u/7586336/googleVisExamples/gvisObject.png\" alt=\"gvis object structure\" />\n\n---\n\n\n## Line chart with options set\n\n```{r results='asis', tidy=FALSE}\ndf <- data.frame(label=c(\"US\", \"GB\", \"BR\"), val1=c(1,3,4), val2=c(23,12,32))\nLine <- gvisLineChart(df, xvar=\"label\", yvar=c(\"val1\",\"val2\"),\n        options=list(title=\"Hello World\", legend=\"bottom\",\n                titleTextStyle=\"{color:'red', fontSize:18}\",                         \n                vAxis=\"{gridlines:{color:'red', count:3}}\",\n                hAxis=\"{title:'My Label', titleTextStyle:{color:'blue'}}\",\n                series=\"[{color:'green', targetAxisIndex: 0}, \n                         {color: 'blue',targetAxisIndex:1}]\",\n                vAxes=\"[{title:'Value 1 (%)', format:'##,######%'}, \n                                  {title:'Value 2 (\\U00A3)'}]\",                          \n                curveType=\"function\", width=500, height=300                         \n                ))\n```\nOptions in googleVis have to follow the Google Chart API options\n\n---\n\n## Line chart with options\n```{r results='asis'}\nplot(Line)\n```\n\n---\n\n## On-line changes\n\nYou can enable the chart editor which allows users to change the chart.\n```{r results='asis'}\nplot(gvisLineChart(df, options=list(gvis.editor=\"Edit me!\", height=350)))\n```\n\n---\n\n## Change motion chart settings\n\n```{r results='asis'}\nplot(gvisMotionChart(Fruits, \"Fruit\", \"Year\", \n                     options=list(width=500, height=350)))\n```\nChange displaying settings via the browser, then copy the state string from the 'Advanced' tab and set to `state` argument in `options`.\nEnsure you have newlines at the beginning and end of the string. \n\n---\n\n## Motion chart with initial settings changed\n\n```{r results='asis', tidy=FALSE}\nmyStateSettings <- '\\n{\"iconType\":\"LINE\", \"dimensions\":{\n    \"iconDimensions\":[\"dim0\"]},\"xAxisOption\":\"_TIME\",\n    \"orderedByX\":false,\"orderedByY\":false,\"yZoomedDataMax\":100}\\n'\nplot(gvisMotionChart(Fruits, \"Fruit\", \"Year\", \n      options=list(state=myStateSettings, height=320)))\n```\n\n---\n\n## Displaying geographical information\n\nPlot countries' S&P credit rating sourced from Wikipedia (requires googleVis 0.4.3)\n```{r tidy=FALSE}\nlibrary(XML)\nurl <- \"http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating\"\nx <- readHTMLTable(readLines(url), which=3)\nlevels(x$Rating) <- substring(levels(x$Rating), 4, \n                            nchar(levels(x$Rating)))\nx$Ranking <- x$Rating\nlevels(x$Ranking) <- nlevels(x$Rating):1\nx$Ranking <- as.character(x$Ranking)\nx$Rating <- paste(x$Country, x$Rating, sep=\": \")\nG <- gvisGeoChart(x, \"Country\", \"Ranking\", hovervar=\"Rating\",\n                options=list(gvis.editor=\"S&P\", \n                             colorAxis=\"{colors:['#91BFDB', '#FC8D59']}\"))\n```\n\n---\n\n## Chart countries' S&P credit rating\n```{r results='asis'}\nplot(G)\n```\n\n---\n\n## Geo chart with markers\nDisplay earth quake information of last 30 days\n```{r results='asis', tidy=FALSE}\nlibrary(XML)\neq <- read.csv(\"http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_week.csv\")\neq$loc=paste(eq$Latitude, eq$Longitude, sep=\":\")\n\nG <- gvisGeoChart(eq, \"loc\", \"Depth\", \"Magnitude\",\n                   options=list(displayMode=\"Markers\", \n                   colorAxis=\"{colors:['purple', 'red', 'orange', 'grey']}\",\n                   backgroundColor=\"lightblue\"), chartid=\"EQ\")\n````\n\n---\n\n## Geo chart of earth quakes\n```{r results='asis', tidy=FALSE}\nplot(G)\n```\n\n---\n\n## Org chart\n```{r results='asis', tidy=FALSE}\nOrg <- gvisOrgChart(Regions, options=list(width=600, height=250,\n                               size='large', allowCollapse=TRUE))\nplot(Org)\n```\n\n---\n\n## Org chart data\n```{r}\nRegions\n```\nNotice the data structure. Each row in the data table describes one node. Each node (except the root node) has one or more parent nodes. \n\n---\n\n\n## Tree map\nSame data structure as for org charts required.\n```{r results='asis'}\nTree <- gvisTreeMap(Regions,  idvar=\"Region\", parentvar=\"Parent\",\n                    sizevar=\"Val\", colorvar=\"Fac\",\n                    options=list(width=450, height=320))\nplot(Tree)\n```\n\n---\n\n## Annotated time line data\nDisplay time series data with notes.\n```{r}\nhead(Stock)\n```\n\n---\n\n## Annotated time line\n\n```{r results='asis', eval=FALSE}\nA1 <- gvisAnnotatedTimeLine(Stock, datevar=\"Date\",\n                           numvar=\"Value\", idvar=\"Device\",\n                           titlevar=\"Title\", annotationvar=\"Annotation\",\n                           options=list(displayAnnotations=TRUE,\n                            legendPosition='newRow',\n                            width=600, height=300), chartid=\"ATLC\"\n                           )\nplot(A1)\n```\n<iframe src=\"https://dl.dropboxusercontent.com/u/7586336/googleVisExamples/AnnotatedTimeLineExample.html\" frameborder=\"0\", width=\"620\", height=\"350\">Loading</iframe>\n\n---\n\n## Merging gvis-objects\n\n```{r results='asis', tidy=FALSE}\nG <- gvisGeoChart(Exports, \"Country\", \"Profit\", \n                  options=list(width=250, height=120))\nB <- gvisBarChart(Exports[,1:2], yvar=\"Profit\", xvar=\"Country\",                  \n                  options=list(width=250, height=260, legend='none'))\nM <- gvisMotionChart(Fruits, \"Fruit\", \"Year\",\n                     options=list(width=400, height=380))\nGBM <- gvisMerge(gvisMerge(G,B, horizontal=FALSE), \n                 M, horizontal=TRUE, tableOptions=\"cellspacing=5\")\n```\n\n---\n\n## Display merged gvis-objects\n```{r merged, results='asis', eval=FALSE}\nplot(GBM)\n```\n<iframe src=\"https://dl.dropboxusercontent.com/u/7586336/googleVisExamples/gvisMergeExample.html\" frameborder=\"0\", width=\"620\", height=\"420\">Loading</iframe>\n\n---\n\n## Embedding googleVis chart into your web page\n\nSuppose you have an existing web page and would like to integrate the output of a googleVis function, such as ```gvisMotionChart```.\n\nIn this case you only need the chart output from ```gvisMotionChart```. So you can either copy and paste the output from the R console\n\n```{r eval=FALSE}\n print(M, 'chart') #### or cat(M$html$chart)\n```\ninto your existing html page, or write the content directly into a file\n\n```{r eval=FALSE}\nprint(M, 'chart', file='myfilename')\n```\nand process it from there.\n\n---\n\n## Embedding googleVis output via iframe\n\n* Embedding googleVis charts is often easiest done via the iframe tag:\n* Host the googleVis output on-line, e.g. public Dropbox folder\n* Use the iframe tag on your page:\n\n```\n<iframe width=620 height=300 frameborder=\"0\"\nsrc=\"http://dl.dropbox.com/u/7586336/RSS2012/line.html\">\nYour browser does not support iframe\n</iframe>\n```\n\n---\n\n## iFrame output\n\n<iframe width=620 height=300 frameborder=\"0\" src=\"http://dl.dropbox.com/u/7586336/RSS2012/line.html\">You browser does not support iframe</iframe>\n\n---\n\n## Including googleVis output in knitr with plot statement\n\n* With version 0.3.2 of googleVis `plot.gvis` gained the argument `'tag'`, which works similar to the argument of the same name in `print.gvis`. \n\n* By default the tag argument is `NULL` and `plot.gvis` has the same behaviour as in the previous versions of googleVis. \n\n* Change the tag to `'chart'` and `plot.gvis` will produce the same output as `print.gvis`. \n\n* Thus, setting the `gvis.plot.tag` value to `'chart'` in `options()` will return the HTML code of the chart when the file is parsed with `knitr`. \n\n* See the example in `?plot.gvis` for more details\n\n---\n\n## Blog articles with googleVis tips\n\n* [How to set axis options in googleVis](http://lamages.blogspot.co.uk/2013/04/how-to-set-axis-options-in-googlevis.html)\n* [World Bank data demo](http://lamages.blogspot.co.uk/2013/03/googlevis-042-with-support-for-shiny.html)\n* [First steps of using googleVis on shiny](http://lamages.blogspot.co.uk/2013/02/first-steps-of-using-googlevis-on-shiny.html)\n* [Using googleVis with knitr](http://lamages.blogspot.co.uk/2012/10/googlevis-032-is-released-better.html)\n* [Rook rocks! Example with googleVis](http://lamages.blogspot.co.uk/2012/08/rook-rocks-example-with-googlevis.html)\n* [Plotting share price data](http://lamages.blogspot.co.uk/2012/02/reshaping-world.html)\n\n---\n\n## Other R packages\n\n*  [R animation package allows to create SWF, GIF and MPEG directly](http://animation.yihui.name/)\n*  [iplots: iPlots - interactive graphics for R](http://cran.r-project.org/web/packages/iplots/)\n*  [Acinonyx aka iPlots eXtreme](http://rforge.net/Acinonyx/index.html)\n*  [gridSVG: Export grid graphics as SVG](http://cran.r-project.org/web/packages/gridSVG/index.html)\n*  [plotGoogleMaps: Plot HTML output with Google Maps API and your own data](http://cran.r-project.org/web/packages/plotGoogleMaps/)\n*  [RgoogleMaps: Overlays on Google map tiles in R](http://cran.r-project.org/web/packages/RgoogleMaps/index.html)\n* [rCharts](http://ramnathv.github.io/rCharts/)\n* [clickme](https://github.com/nachocab/clickme)\n\n--- \n\n## How I created these slides\n\n```{r slidify, eval=FALSE}\nlibrary(slidify)\nsetwd(\"~/Dropbox/Lancaster/\")\nauthor(\"Introduction_to_googleVis\")\n## Edit the file index.Rmd file and then\nslidify(\"index.Rmd\")\n```\n\n---\n\n## The End. So what ...? \n\n* googleVis brings interactive plots to R\n\n* Use them to engage with other\n\n* No more boring data\n\n----\n\n## Contact\n\n* Markus Gesmann\n* [markus.gesmann gmail.com](mailto:markus.gesmann@gmail.com)\n* My blog: [http://lamages.blogspot.com](http://lamages.blogspot.com)\n\n---\n\n## Thanks\n\n* Google, who make the visualisation API available\n* All the guys behind www.gapminder.org and Hans Rosling for telling\n    everyone that data is not boring \n* Sebastian Perez Saaibi for his inspiring talk on 'Generator\n    Tool for Google Motion Charts' at the R/RMETRICS conference 2010\n* Henrik Bengtsson for providing the 'R.rsp: R Server Pages'\n    package and his reviews and comments\n* Duncan Temple Lang for providing the 'RJSONIO' package\n* Deepayan Sarkar for showing us in the lattice package how to deal\n    with lists of options  \n* Paul Cleary for a bug report on the handling of months:\n    Google date objects expect the months Jan.- Dec. as 0 - 11 and\n    not 1 - 12.\n* Ben Bolker for comments on plot.gvis and the usage of temporary\n    files  \n\n\n---\n\n## Thanks \n\n* John Verzani for pointing out how to use the R http help server\n* Cornelius Puschmann and Jeffrey Breen for highlighting a\n    dependency issue with RJONSIO version 0.7-1\n* Manoj Ananthapadmanabhan and Anand Ramalingam for providing\n    ideas and code to animate a Google Geo Map\n* Rahul Premraj for pointing out a rounding issue with Google Maps \n* Mike Silberbauer for an example showing how to shade the\n    areas in annotated time line charts\n* Tony Breyal for providing instructions on changing the Flash\n    security settings to display Flash charts locally \n* Alexander Holcroft for reporting a bug in gvisMotionChart\n    when displaying data with special characters in column names\n* Pat Burns for pointing out typos in the vignette\n\n---\n\n## Thanks\n\n* Jason Pickering for providing a patch to allow for quarterly \n    and weekly time dimensions to be displayed with gvisMotionChart\n* Oliver Jay and Wai Tung Ho for reporting an issue with one-row \n    data sets\n* Erik Bülow for pointing out how to load the Google API via a\n    secure connection\n* Sebastian Kranz for comments to enhance the argument list for\n    gvisMotionChart to make it more user friendly \n* Sebastian Kranz and Wei Luo for providing ideas and code to\n    improve the transformation of R data frames into JSON code\n* Sebastian Kranz for reporting a bug in version 0.3.0\n* Leonardo Trabuco for helping to clarify the usage of the\n    argument state in the help file of gvisMotionChart\n* Mark Melling for reporting an issue with jsDisplayChart and\n    providing a solution\n\n---\n\n## Thanks\n\n* Joe Cheng for code contribution to make googleVis work with shiny\n* John Maindonald for reporting that the WorldBank demo didn't \n    download all data, but only the first 12000 records.\n* Sebastian Campbell for reporting a typo in the Andrew and Stock\n    data set and pointing out that the core charts, such as line\n  charts accept also date variables for the x-axis. \n* John Maindonald for providing a simplified version of the\n    WorldBank demo using the WDI package.\n* John Muschelli for suggesting to add 'hovervar' as an additional\n    argument to gvisGeoChart.\n\n---\n## Session Info\n\n```{r sessionInfo}\nsessionInfo()\n```\n",
    "created" : 1369843047168.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4177622641",
    "id" : "AD9A19D5",
    "lastKnownWriteTime" : 1369841860,
    "path" : "~/Documents/GitHub/slidify-tutorial/index.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}