}
}
genInit <- genInitFactory()
modelInits( bugsInits( genInit ) )
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "delta" )
# Run the chain:
chainLength = 50000
modelUpdate( chainLength, thin = 10 )
########################################################
# Check results:
sample.delta <- samplesSample("delta")
stats.delta  <- samplesStats("delta")
stats.delta
sample.delta
HPDinterval(as.mcmc(sample.delta), prob=0.95)
exp.param <- fitdistr(sample.delta, "exponential")
min(sample.delta)
modelString = "
model {
# Likelihood
y ~ dbin(theta, N)        # y: número de verdades
# Priors
theta ~ dbeta(1, 1)   # theta: probabilidade de dizer verdade
}
"
writeLines(modelString,con="modelo_ex-a.txt")
modelCheck( "modelo_ex-a.txt" )
########################################################
# Load Data
dataList = list(
N = 10,
y = 0
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
genInitFactory <- function()  {
i <- 0
function() {
i <<- i + 1
list(
theta = 0.5     # assumimos de inicio uma probabilidade de 50%
)
}
}
genInit <- genInitFactory()
modelInits( bugsInits( genInit ) )
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "theta" )
# Run the chain:
chainLength = 10000
modelUpdate( chainLength, thin = 10 )
########################################################
# Check results:
sample.theta <- samplesSample("theta")
stats.theta  <- samplesStats("theta")
stats.theta
samplesDensity("theta", mfrow = c(1, 1))
library(BRugs)
modelString = "
model {
# Likelihood
y ~ dbin(theta, N)        # y: número de verdades
# Priors
theta ~ dbeta(1, 1)   # theta: probabilidade de dizer verdade
}
"
writeLines(modelString,con="modelo_ex-a.txt")
modelCheck( "modelo_ex-a.txt" )
########################################################
# Load Data
dataList = list(
N = 10,
y = 0
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
genInitFactory <- function()  {
i <- 0
function() {
i <<- i + 1
list(
theta = 0.5     # assumimos de inicio uma probabilidade de 50%
)
}
}
genInit <- genInitFactory()
modelInits( bugsInits( genInit ) )
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "theta" )
# Run the chain:
chainLength = 10000
modelUpdate( chainLength, thin = 10 )
########################################################
# Check results:
sample.theta <- samplesSample("theta")
stats.theta  <- samplesStats("theta")
stats.theta
samplesDensity("theta", mfrow = c(1, 1))
modelString = "
model {
# Likelihood
y ~ dbin(theta, N)    # y: número de verdades
# Priors
theta ~ dbeta(1, 1)   # theta: probabilidade de dizer verdade
}
"
writeLines(modelString,con="modelo_ex-a.txt")
modelCheck( "modelo_ex-a.txt" )
########################################################
# Load Data
dataList = list(
N = 10,
y = 0
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
modelGenInits()
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "theta" )
# Run the chain:
chainLength = 10000
modelUpdate( chainLength, thin = 10 )
########################################################
# Check results:
sample.theta <- samplesSample("theta")
stats.theta  <- samplesStats("theta")
stats.theta
library(BRugs)
modelString = "
model {
for(i in 1:N) {
r[i] ~ dbin(theta[i], n[i])
logit(theta[i]) <- alpha + beta * (x[i] - xbar)
}
#prioris
alpha ~ dbeta(1,1)
beta  ~ dbeta(1,1)
alpha0 <- alpha - xbar*beta
}
"
writeLines(modelString,con="modelo_ex4.txt")
modelCheck( "modelo_ex4.txt" )
########################################################
# Load Data
dataList = list(
n = c(59,60,62,56,63,59,62,60),
r = c(6,13,18,28,52,53,61,60),
x  = c(1.6907,1.7242,1.7552,1.7842,1.8113,1.8369,1.8610,1.8839),
xbar = mean(c(1.6907,1.7242,1.7552,1.7842,1.8113,1.8369,1.8610,1.8839)),
N = 8
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
genInitFactory <- function()  {
i <- 0
function() {
i <<- i + 1
list(
alpha = 0.001,
beta  = 0.001
)
}
}
genInit <- genInitFactory()
modelInits( bugsInits( genInit ) )
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "alpha0" )
samplesSet( "theta" )
dicSet()  # evaluate the Deviance Information Criterion
# Run the chain:
chainLength = 5000
modelUpdate( chainLength, thin = 1 )
########################################################
# Check results:
sample.alpha0 <- samplesSample("alpha0")
stats.alpha0  <- samplesStats("alpha0")
stats.alpha0
N=8
thetaSample = NULL
thetaSummary = NULL
for (i in 1:N) {
thetaSample  <- rbind( thetaSample,  samplesSample( paste0("theta[",i,"]") ) )
thetaSummary <- rbind( thetaSummary, samplesStats(  paste0("theta[",i,"]") ) )
}
thetaSummary
dicStats()
modelString = "
model {
for(i in 1:N) {
r[i] ~ dbin(theta[i], n[i])
logit(theta[i]) <- alpha + beta * (x[i] - xbar)
}
#prioris
alpha ~ dbeta(1,1)
beta  ~ dbeta(1,1)
alpha0 <- alpha - xbar*beta
}
"
writeLines(modelString,con="modelo_ex4.txt")
modelCheck( "modelo_ex4.txt" )
########################################################
# Load Data
dataList = list(
n = c(59,60,62,56,63,59,62,60),
r = c(6,13,18,28,52,53,61,60),
x  = c(1.6907,1.7242,1.7552,1.7842,1.8113,1.8369,1.8610,1.8839),
xbar = mean(c(1.6907,1.7242,1.7552,1.7842,1.8113,1.8369,1.8610,1.8839)),
N = 8
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
genInitFactory <- function()  {
i <- 0
function() {
i <<- i + 1
list(
alpha = 0.001,
beta  = 0.001
)
}
}
genInit <- genInitFactory()
modelInits( bugsInits( genInit ) )
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "alpha0" )
samplesSet( "beta" )
samplesSet( "theta" )
dicSet()  # evaluate the Deviance Information Criterion
# Run the chain:
chainLength = 5000
modelUpdate( chainLength, thin = 1 )
########################################################
# Check results:
sample.alpha0 <- samplesSample("alpha0")
stats.alpha0  <- samplesStats("alpha0")
stats.alpha0
sample.beta <- samplesSample("beta")
stats.beta  <- samplesStats("beta")
stats.beta
samplesDensity(c("alpha0","beta"), mfrow = c(1, 2))
samplesDensity("c(\"alpha0\",\"beta\")", mfrow = c(1, 2))
samplesDensity("*", mfrow = c(2, 4))
samplesDensity("*", mfrow = c(3, 4))
thetaSummary
boxplot(thetaSample, use.cols=FALSE, xlab="Dosagem de CS2", ylab="% morte")
par(mfrow = c(1, 1))
boxplot(thetaSample, use.cols=FALSE, xlab="Dosagem de CS2", ylab="% morte")
dicStats()
boxplot(thetaSample, use.cols=FALSE, xlab=bquote("Dosagem de ", CS[2]), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE, xlab=paste("Dosagem de ", bquote(CS[2]), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE, xlab=paste("Dosagem de ", bquote(CS[2])), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE,
xlab=paste("Dosagem de ", bquote(CS[2])), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE,
xlab=paste("Dosagem de CS", bquote([2])), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE,
xlab=paste("Dosagem de CS", bquote(S[2])), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE,
xlab=paste0("Dosagem de CS", bquote(S[2])), ylab="% morte")
boxplot(thetaSample, use.cols=FALSE, xlab="Dosagem de CS2", ylab="% morte")
modelString = "
model {
# Likelihood
y ~ dbin(theta, N)    # y: número de verdades
# Priors
theta ~ dbeta(1, 1)   # theta: probabilidade de dizer verdade
}
"
writeLines(modelString,con="modelo_ex-a.txt")
modelCheck( "modelo_ex-a.txt" )
########################################################
# Load Data
dataList = list(
N = 700,
y = 100
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
modelGenInits()
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "theta" )
# Run the chain:
chainLength = 10000
modelUpdate( chainLength, thin = 1 )
sample.theta <- samplesSample("theta")
stats.theta  <- samplesStats("theta")
stats.theta
samplesDensity("theta", mfrow = c(1, 1))
stats.theta
sample.theta
hist(sample.theta)
stats.theta
library(coda)
HPDinterval(as.mcmc(sample.theta), prob=0.95)
Assumindo que os 300 votantes dizem a verdade, então temos 100 mentirosos em 700 pessoas. Fazendo as mesmas contas que anteriormente: os dados $x$ são $y=100$ e $N=700$. Assim, a posterior $\theta|x$ é dada por beta(1+y,1+N-y) = beta(101,601)). O valor esperado desta beta é $E(beta(101,601) = \frac{101}{601} = 8.3\%$
101/601
101/702
theta.params <- fitdistr(sample.theta, "beta")
library(MASS)
theta.params <- fitdistr(sample.theta, "beta")
library(BRugs)
modelString = "
model {
# Likelihood
y ~ dbin(theta, N)    # y: número de verdades
# Priors
theta ~ dbeta(1, 1)   # theta: probabilidade de dizer verdade
}
"
writeLines(modelString,con="modelo_ex-a.txt")
modelCheck( "modelo_ex-a.txt" )
########################################################
# Load Data
dataList = list(
N = 700,
y = 100
)
modelData( bugsData( dataList ) )
modelCompile()
########################################################
# Load Initialization
modelGenInits()
########################################################
burn.in = 1000               # burn the first iterations
modelUpdate( burn.in )
# Keep track of:
samplesSet( "theta" )
# Run the chain:
chainLength = 10000
modelUpdate( chainLength, thin = 1 )
########################################################
# Check results:
sample.theta <- samplesSample("theta")
stats.theta  <- samplesStats("theta")
stats.theta
samplesDensity("theta", mfrow = c(1, 1))
theta.params <- fitdistr(sample.theta, "beta")
theta.params <- fitdistr(sample.theta, "Beta")
theta.params <- fitdistr(sample.theta, "beta", list(alpha = 1, beta = 1))
theta.params <- fitdistr(sample.theta, "beta", list(shape1 = 1, shape2 = 1))
sigma.params$estimate['shape1']
theta.params$estimate['shape1']
theta.params$estimate['shape2']
signif(theta.params$estimate['shape1'],5)
signif(theta.params$estimate['shape2'],5)
theta.params <- fitdistr(sample.theta, "beta", list(shape1 = 10, shape2 = 10))
theta.params$estimate['shape1']
theta.params$estimate['shape2']
theta.params <- fitdistr(sample.theta, "beta", list(shape1 = 100, shape2 = 600))
theta.params$estimate['shape1']
theta.params$estimate['shape2']
install.packages("gptk")
require(MASS)
require(plyr)
require(reshape2)
require(ggplot2)
calcSigma <- function(X1,X2,l=1) {
Sigma <- matrix(rep(0, length(X1)*length(X2)), nrow=length(X1))
for (i in 1:nrow(Sigma)) {
for (j in 1:ncol(Sigma)) {
Sigma[i,j] <- exp(-0.5*(abs(X1[i]-X2[j])/l)^2)
}
}
return(Sigma)
}
a <- c(9,3,5)
b <- c(3,4,1)
cbind(a, b)
cov(cbind(a, b))
calcSigma(a,b)
x.star <- seq(-5,5,len=50)
x.star
sigma <- calcSigma(x.star,x.star)
sigma
n.samples <- 3
values <- matrix(rep(0,length(x.star)*n.samples), ncol=n.samples)
values
# Each column represents a sample from a multivariate normal distribution
# with zero mean and covariance sigma
values[,i] <- mvrnorm(1, rep(0, length(x.star)), sigma)
}
for (i in 1:n.samples) {
# Each column represents a sample from a multivariate normal distribution
# with zero mean and covariance sigma
values[,i] <- mvrnorm(1, rep(0, length(x.star)), sigma)
}
values
head(values)
rep(0, length(x.star))
values <- cbind(x=x.star,as.data.frame(values))
values
values <- melt(values,id="x")
values
fig2a <- ggplot(values,aes(x=x,y=value)) +
geom_rect(xmin=-Inf, xmax=Inf, ymin=-2, ymax=2, fill="grey80") +
geom_line(aes(group=variable)) +
theme_bw() +
scale_y_continuous(lim=c(-2.5,2.5), name="output, f(x)") +
xlab("input, x")
fig2a
f <- data.frame(x=c(-4,-3,-1,0,2),
y=c(-2,0,1,2,-1))
# Calculate the covariance matrices using the same x.star values as above
x <- f$x
k.xx <- calcSigma(x,x)
k.xxs <- calcSigma(x,x.star)
k.xsx <- calcSigma(x.star,x)
k.xsxs <- calcSigma(x.star,x.star)
# These matrix calculations correspond to equation (2.19) in the book.
f.star.bar <- k.xsx %*% solve(k.xx) %*% f$y
cov.f.star <- k.xsxs - k.xsx %*% solve(k.xx) %*% k.xxs
# This time we'll plot more samples.  We could of course
# simply plot a +/- 2 standard deviation confidence interval
# as in the book but I want to show the samples explicitly here.
n.samples <- 50
values <- matrix(rep(0,length(x.star)*n.samples), ncol=n.samples)
for (i in 1:n.samples) {
values[,i] <- mvrnorm(1, f.star.bar, cov.f.star)
}
values <- cbind(x=x.star,as.data.frame(values))
values <- melt(values,id="x")
fig2b <- ggplot(values,aes(x=x,y=value)) +
geom_line(aes(group=variable), colour="grey80") +
geom_line(data=NULL,aes(x=x.star,y=f.star.bar),colour="red", size=1) +
geom_point(data=f,aes(x=x,y=y)) +
theme_bw() +
scale_y_continuous(lim=c(-3,3), name="output, f(x)") +
xlab("input, x")
fig2b
values
head(values)
f
f.star.bar
sigma.n <- 0.1
f.bar.star <- k.xsx%*%solve(k.xx + sigma.n^2*diag(1, ncol(k.xx)))%*%f$y
cov.f.star <- k.xsxs - k.xsx%*%solve(k.xx + sigma.n^2*diag(1, ncol(k.xx)))%*%k.xxs
values <- matrix(rep(0,length(x.star)*n.samples), ncol=n.samples)
for (i in 1:n.samples) {
values[,i] <- mvrnorm(1, f.bar.star, cov.f.star)
}
values <- cbind(x=x.star,as.data.frame(values))
values <- melt(values,id="x")
gg <- ggplot(values, aes(x=x,y=value)) +
geom_line(aes(group=variable), colour="grey80") +
geom_line(data=NULL,aes(x=x.star,y=f.bar.star),colour="red", size=1) +
geom_errorbar(data=f,aes(x=x,y=NULL,ymin=y-2*sigma.n, ymax=y+2*sigma.n), width=0.2) +
geom_point(data=f,aes(x=x,y=y)) +
theme_bw() +
scale_y_continuous(lim=c(-3,3), name="output, f(x)") +
xlab("input, x")
gg
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
[1,2,3]
[1 2 3]
(1 2 3)
X = matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3 )
X
X = matrix(c(1,2,
3,11,
12,13), nrow = 2, ncol = 3, byrow=TRUE )
X
X = t( matrix(c(17, 2.5, 3.0,  # each line is an observation
11, 1.7, 4.0,
20, 2.0, 3.5), nrow = 2, ncol = 3, byrow=TRUE ) )
X = t( matrix(c(17, 2.5, 3.0,  # each line is an observation
11, 1.7, 4.0,
20, 2.0, 3.5), ncol = 3, byrow=TRUE ) )
X
calcSigma(c(1,2,3),c(1,2,3))
calcSigma(c(1,2,3),c(1,2,4))
publish('jpneto', 'slidify-tutorial')
install.packages("devtools")
library("devtools")
library(devtools)
publish('jpneto', 'slidify-tutorial')
setwd("~/Documents/GitHub/slidify-tutorial")
source("publish.R")
publish('jpneto', 'slidify-tutorial')
